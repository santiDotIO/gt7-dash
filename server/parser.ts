import { Parser } from "binary-parser";

const wheel = new Parser()
  .floatle("FrontLeft")
  .floatle("FrontRight")
  .floatle("RearLeft")
  .floatle("RearRight");

const vector3 = new Parser().floatle("x").floatle("y").floatle("z");

const vector3rotation = new Parser()
  .floatle("pitch")
  .floatle("yaw")
  .floatle("roll");

export const gt7parser = new Parser()
  .endianness("little")
  .int32le("magic", { assert: 0x47375330 })
  .nest("position", { type: vector3 })
  .nest("velocity", { type: vector3 })
  .nest("rotation", { type: vector3rotation })
  .floatle("relativeOrientationToNorth")
  .nest("angularVelocity", { type: vector3 })
  .floatle("bodyHeight")
  .floatle("engineRPM")
  .skip(4)
  .floatle("gasLevel")
  .floatle("gasCapacity")
  .floatle("metersPerSecond")
  .floatle("turboBoost")
  .floatle("oilPressure")
  .floatle("waterTemperature")
  .floatle("oilTemperature")
  .nest("tireSurfaceTemperature", { type: wheel })
  .int32le("packetId")
  .int16le("lapCount")
  .int16le("lapsInRace")
  .int32le("bestLapTime")
  .int32le("lastLapTime")
  .int32le("timeOfDayProgression")
  .int16le("preRaceStartPositionOrQualiPos")
  .int16le("numCarsAtPreRace")
  .int16le("minAlertRPM")
  .int16le("maxAlertRPM")
  .int16le("calculatedMaxSpeed")
  .int16le("flags")
  .bit4("currentGear")
  .bit4("suggestedGear")
  .uint8("throttle")
  .uint8("brake")
  .skip(1)
  .nest("roadPlane", { type: vector3 })
  .floatle("roadPlaneDistance")
  .nest("wheelRevPerSecond", { type: wheel })
  .nest("tireTireRadius", { type: wheel })
  .nest("tireSusHeight", { type: wheel })
  .skip(32)
  .floatle("clutchPedal")
  .floatle("clutchEngagement")
  .floatle("rpmFromClutchToGearbox")
  .floatle("transmissionTopSpeed")
  .array("gearRatios", { type: "floatle", length: 8 })
  .int32le("carCode");
